{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, memo, useRef } from 'react';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, List, Comment, Popover } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST, REMOVE_COMMENT_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport CommentForm from './CommentForm';\nimport moment from 'moment';\nimport FollowButton from '../components/FollowButton';\nimport { CardWrapper, DateSpan, PostCardAtag, PostCardDesAtag, CommentWrapper, CommentStyle, CommentRemoveBtn } from './Style/ContainerStyle';\nimport Router from 'next/router';\nimport { useEffect } from 'react';\nmoment.locale('ko');\nvar PostCard = memo(function (_ref) {\n  var post = _ref.post,\n      commentOpened = _ref.commentOpened;\n\n  var _useState = useState(commentOpened),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var id = useSelector(function (state) {\n    return state.user.me && state.user.me.id;\n  });\n  var dispatch = useDispatch();\n  var liked = id && post.Likers && post.Likers.find(function (v) {\n    return v.id === id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    } // likers 안에 좋아요 누른 사람들의 배열이 들어있음\n\n\n    if (liked) {\n      //좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (postId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: postId\n      });\n      Router.push('/');\n    };\n  }, []);\n  var onRemoveComment = useCallback(function (commentId) {\n    return function () {\n      dispatch({\n        type: REMOVE_COMMENT_REQUEST,\n        data: {\n          commentId: commentId,\n          postId: post.id\n        }\n      });\n    };\n  }, []);\n  return (/*#__PURE__*/React.createElement(CardWrapper, null, /*#__PURE__*/React.createElement(Card // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\n    , {\n      cover: post.Images && post.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/React.createElement(Icon, {\n        type: \"retweet\",\n        key: \"retweet\",\n        onClick: onRetweet\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"heart\",\n        key: \"heart\",\n        theme: liked ? 'twoTone' : 'outlined',\n        twoToneColor: \"#ff7a45\",\n        onClick: onToggleLike\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"message\",\n        key: \"message\",\n        onClick: onToggleComment\n      }), /*#__PURE__*/React.createElement(Popover, {\n        key: \"ellipsis\",\n        content: /*#__PURE__*/React.createElement(Button.Group, null, id && post.UserId === id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n          type: \"danger\",\n          onClick: onRemovePost(post.id)\n        }, \"\\uC0AD\\uC81C\")) : /*#__PURE__*/React.createElement(Button, null, \"\\uC2E0\\uACE0\"))\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"ellipsis\"\n      }))],\n      title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4\") : /*#__PURE__*/React.createElement(\"span\", null, moment(post.createdAt).format('YYYY.MM.DD.')) //로그인을 안 했다면 버튼이 보이지 않음\n      ,\n      extra: /*#__PURE__*/React.createElement(FollowButton, {\n        post: post,\n        onUnfollow: onUnfollow,\n        onFollow: onFollow\n      })\n    }, post.RetweetId && post.Retweet ? /*#__PURE__*/React.createElement(Card, {\n      cover: post.Retweet.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Retweet.Images\n      })\n    }, /*#__PURE__*/React.createElement(DateSpan, null, moment(post.createdAt).format('YYYY.MM.DD.')), /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.Retweet.User.id\n          }\n        },\n        as: \"/user/\".concat(post.Retweet.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.Retweet.User.nickname[0]))),\n      title: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.Retweet.User.id\n          }\n        },\n        as: \"/user/\".concat(post.Retweet.User.id)\n      }, /*#__PURE__*/React.createElement(PostCardAtag, null, post.Retweet.User.nickname)),\n      description: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/post',\n          query: {\n            id: post.RetweetId ? post.RetweetId : post.id\n          }\n        },\n        as: \"/post/\".concat(post.RetweetId ? post.RetweetId : post.id)\n      }, /*#__PURE__*/React.createElement(PostCardDesAtag, null, /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.Retweet.content\n      })))\n    })) : /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: \"/user/\".concat(post.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.User.nickname[0]))),\n      title: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: \"/user/\".concat(post.User.id)\n      }, /*#__PURE__*/React.createElement(PostCardAtag, null, post.User.nickname)),\n      description: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/post',\n          query: {\n            id: post.RetweetId ? post.RetweetId : post.id\n          }\n        },\n        as: \"/post/\".concat(post.RetweetId ? post.RetweetId : post.id)\n      }, /*#__PURE__*/React.createElement(PostCardDesAtag, null, /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.content\n      })))\n    })), commentFormOpened && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CommentForm, {\n      post: post\n    }), /*#__PURE__*/React.createElement(List, {\n      header: \"\".concat(post.Comments ? post.Comments.length : 0, \" reply\"),\n      itemLayout: \"horizontal\",\n      dataSource: post.Comments || [],\n      renderItem: function renderItem(item) {\n        return (/*#__PURE__*/React.createElement(CommentWrapper, null, /*#__PURE__*/React.createElement(CommentStyle, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/React.createElement(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: item.User.id\n                }\n              },\n              as: \"/user/\".concat(item.User.id)\n            }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, item.User.nickname[0]))),\n            content: item.content\n          }), id && item.User.id === id ? /*#__PURE__*/React.createElement(CommentRemoveBtn, {\n            onClick: onRemoveComment(item.id)\n          }, \"\\uC0AD\\uC81C\") : null)\n        );\n      }\n    })))\n  );\n});\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/containers/PostCard.js"],"names":["React","useState","useCallback","memo","useRef","Link","Card","Icon","Button","Avatar","List","Comment","Popover","useSelector","useDispatch","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","LOAD_COMMENT_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","REMOVE_COMMENT_REQUEST","PostImages","PostCardContent","CommentForm","moment","FollowButton","CardWrapper","DateSpan","PostCardAtag","PostCardDesAtag","CommentWrapper","CommentStyle","CommentRemoveBtn","Router","useEffect","locale","PostCard","post","commentOpened","commentFormOpened","setCommentFormOpened","id","state","user","me","dispatch","liked","Likers","find","v","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","postId","push","onRemoveComment","commentId","Images","UserId","RetweetId","User","nickname","createdAt","format","Retweet","pathname","query","content","Comments","length","item"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,IAAvC,EAA6CC,MAA7C,QAA2D,OAA3D;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,OAA3C,EAAoDC,OAApD,QAAmE,MAAnE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,QAA2D,kBAA3D;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,EAAoDC,iBAApD,EAAuEC,eAAvE,EAAwFC,mBAAxF,EAA6GC,sBAA7G,QAA2I,kBAA3I;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,YAAhC,EAA8CC,eAA9C,EAA+DC,cAA/D,EAA+EC,YAA/E,EAA6FC,gBAA7F,QAAqH,wBAArH;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEAV,MAAM,CAACW,MAAP,CAAc,IAAd;AAEA,IAAMC,QAAQ,GAAGnC,IAAI,CAAC,gBAA6B;AAAA,MAA1BoC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,kBACGvC,QAAQ,CAACuC,aAAD,CADX;AAAA;AAAA,MACxCC,iBADwC;AAAA,MACrBC,oBADqB;;AAE/C,MAAMC,EAAE,GAAG9B,WAAW,CAAC,UAAA+B,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWC,EAAX,IAAiBF,KAAK,CAACC,IAAN,CAAWC,EAAX,CAAcH,EAAnC;AAAA,GAAN,CAAtB;AACA,MAAMI,QAAQ,GAAGjC,WAAW,EAA5B;AAEA,MAAMkC,KAAK,GAAGL,EAAE,IAAIJ,IAAI,CAACU,MAAX,IAAqBV,IAAI,CAACU,MAAL,CAAYC,IAAZ,CAAiB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACR,EAAF,KAASA,EAAb;AAAA,GAAlB,CAAnC;AACA,MAAMS,eAAe,GAAGlD,WAAW,CAAC,YAAM;AACtC;AACAwC,IAAAA,oBAAoB,CAAC,UAAAW,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAApB;;AACA,QAAI,CAACZ,iBAAL,EAAwB;AACpBM,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGrC,oBADF;AAELsC,QAAAA,IAAI,EAAGhB,IAAI,CAACI;AAFP,OAAD,CAAR;AAIH;AACJ,GATkC,EAShC,EATgC,CAAnC;AAWA,MAAMa,YAAY,GAAGtD,WAAW,CAAC,YAAK;AAClC,QAAI,CAACyC,EAAL,EAAS;AACL,aAAOc,KAAK,CAAC,YAAD,CAAZ;AACH,KAHiC,CAIlC;;;AACA,QAAIT,KAAJ,EAAW;AAAE;AACTD,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGpC,mBADF;AAELqC,QAAAA,IAAI,EAAGhB,IAAI,CAACI;AAFP,OAAD,CAAR;AAIH,KALD,MAKO;AAAE;AACLI,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGnC,iBADF;AAELoC,QAAAA,IAAI,EAAGhB,IAAI,CAACI;AAFP,OAAD,CAAR;AAIH;AACJ,GAhB+B,EAgB7B,CAACA,EAAD,EAAKJ,IAAI,IAAIA,IAAI,CAACI,EAAlB,EAAsBK,KAAtB,CAhB6B,CAAhC;AAkBA,MAAMU,SAAS,GAAGxD,WAAW,CAAC,YAAM;AAChC,QAAG,CAACyC,EAAJ,EAAO;AACH,aAAOc,KAAK,CAAC,YAAD,CAAZ;AACH;;AACD,WAAOV,QAAQ,CAAC;AACZO,MAAAA,IAAI,EAAGlC,eADK;AAEZmC,MAAAA,IAAI,EAAGhB,IAAI,CAACI;AAFA,KAAD,CAAf;AAIH,GAR4B,EAQ1B,CAACA,EAAD,EAAMJ,IAAI,IAAIA,IAAI,CAACI,EAAnB,CAR0B,CAA7B;AAUA,MAAMgB,QAAQ,GAAGzD,WAAW,CAAC,UAAA0D,MAAM;AAAA,WAAI,YAAM;AACzCb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGvC,mBADF;AAELwC,QAAAA,IAAI,EAAGK;AAFF,OAAD,CAAR;AAIH,KALkC;AAAA,GAAP,EAKzB,EALyB,CAA5B;AAOA,MAAMC,UAAU,GAAG3D,WAAW,CAAC,UAAA0D,MAAM;AAAA,WAAI,YAAM;AAC3Cb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGtC,qBADF;AAELuC,QAAAA,IAAI,EAAGK;AAFF,OAAD,CAAR;AAIH,KALoC;AAAA,GAAP,EAK3B,EAL2B,CAA9B;AAOA,MAAME,YAAY,GAAG5D,WAAW,CAAC,UAAA6D,MAAM;AAAA,WAAI,YAAM;AAC7ChB,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGjC,mBADF;AAELkC,QAAAA,IAAI,EAAGQ;AAFF,OAAD,CAAR;AAIA5B,MAAAA,MAAM,CAAC6B,IAAP,CAAY,GAAZ;AACH,KANsC;AAAA,GAAP,EAM7B,EAN6B,CAAhC;AAQA,MAAMC,eAAe,GAAG/D,WAAW,CAAC,UAAAgE,SAAS;AAAA,WAAI,YAAM;AACnDnB,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAGhC,sBADF;AAELiC,QAAAA,IAAI,EAAG;AACHW,UAAAA,SAAS,EAATA,SADG;AAEHH,UAAAA,MAAM,EAAGxB,IAAI,CAACI;AAFX;AAFF,OAAD,CAAR;AAOH,KAR4C;AAAA,GAAV,EAQhC,EARgC,CAAnC;AAUA,uBACI,oBAAC,WAAD,qBACI,oBAAC,IAAD,CACI;AADJ;AAEI,MAAA,KAAK,EAAEJ,IAAI,CAAC4B,MAAL,IAAe5B,IAAI,CAAC4B,MAAL,CAAY,CAAZ,CAAf,iBAAiC,oBAAC,UAAD;AAAY,QAAA,MAAM,EAAE5B,IAAI,CAAC4B;AAAzB,QAF5C;AAGI,MAAA,OAAO,EAAI,cACP,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,SAAX;AAAqB,QAAA,GAAG,EAAC,SAAzB;AAAmC,QAAA,OAAO,EAAET;AAA5C,QADO,eAEP,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,GAAG,EAAC,OAAvB;AAA+B,QAAA,KAAK,EAAEV,KAAK,GAAG,SAAH,GAAe,UAA1D;AAAsE,QAAA,YAAY,EAAC,SAAnF;AAA6F,QAAA,OAAO,EAAEQ;AAAtG,QAFO,eAGP,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,SAAX;AAAqB,QAAA,GAAG,EAAC,SAAzB;AAAmC,QAAA,OAAO,EAAEJ;AAA5C,QAHO,eAIP,oBAAC,OAAD;AACI,QAAA,GAAG,EAAC,UADR;AAEI,QAAA,OAAO,eACP,oBAAC,MAAD,CAAQ,KAAR,QACKT,EAAE,IAAIJ,IAAI,CAAC6B,MAAL,KAAgBzB,EAAtB,gBAEG,uDACA,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAEmB,YAAY,CAACvB,IAAI,CAACI,EAAN;AAA3C,0BADA,CAFH,gBAMC,oBAAC,MAAD,uBAPN;AAHJ,sBAcI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC;AAAX,QAdJ,CAJO,CAHf;AAwBI,MAAA,KAAK,EAAIJ,IAAI,CAAC8B,SAAL,aAAoB9B,IAAI,CAAC+B,IAAL,CAAUC,QAA9B,mFAAuD,kCAAQ7C,MAAM,CAACa,IAAI,CAACiC,SAAN,CAAN,CAAuBC,MAAvB,CAA8B,aAA9B,CAAR,CAxBpE,CAyBI;AAzBJ;AA0BI,MAAA,KAAK,eAAI,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAIlC,IAAtB;AAA4B,QAAA,UAAU,EAAEsB,UAAxC;AAAoD,QAAA,QAAQ,EAAEF;AAA9D;AA1Bb,OA4BKpB,IAAI,CAAC8B,SAAL,IAAkB9B,IAAI,CAACmC,OAAvB,gBAED,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAInC,IAAI,CAACmC,OAAL,CAAaP,MAAb,CAAoB,CAApB,kBAA0B,oBAAC,UAAD;AAAY,QAAA,MAAM,EAAE5B,IAAI,CAACmC,OAAL,CAAaP;AAAjC;AAAzC,oBACI,oBAAC,QAAD,QAAWzC,MAAM,CAACa,IAAI,CAACiC,SAAN,CAAN,CAAuBC,MAAvB,CAA8B,aAA9B,CAAX,CADJ,eAEI,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,MAAM,eAAI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAACE,UAAAA,QAAQ,EAAG,OAAZ;AAAqBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkB3B;AAAzB;AAA7B,SAAd;AAA4E,QAAA,EAAE,kBAAaJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkB3B,EAA/B;AAA9E,sBAAmH,4CAAG,oBAAC,MAAD,QAASJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkBC,QAAlB,CAA2B,CAA3B,CAAT,CAAH,CAAnH,CADd;AAEI,MAAA,KAAK,eAAI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAACI,UAAAA,QAAQ,EAAG,OAAZ;AAAqBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkB3B;AAAzB;AAA7B,SAAd;AAA4E,QAAA,EAAE,kBAAaJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkB3B,EAA/B;AAA9E,sBAAmH,oBAAC,YAAD,QAC3HJ,IAAI,CAACmC,OAAL,CAAaJ,IAAb,CAAkBC,QADyG,CAAnH,CAFb;AAII,MAAA,WAAW,eACP,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAAEI,UAAAA,QAAQ,EAAG,OAAb;AAAsBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAAC8B,SAAL,GAAiB9B,IAAI,CAAC8B,SAAtB,GAAkC9B,IAAI,CAACI;AAA9C;AAA9B,SAAd;AAAkG,QAAA,EAAE,kBAAaJ,IAAI,CAAC8B,SAAL,GAAiB9B,IAAI,CAAC8B,SAAtB,GAAkC9B,IAAI,CAACI,EAApD;AAApG,sBACI,oBAAC,eAAD,qBACA,oBAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEJ,IAAI,CAACmC,OAAL,CAAaG;AAAxC,QADA,CADJ;AALR,MAFJ,CAFC,gBAiBG,oBAAC,IAAD,CAAM,IAAN;AACI,MAAA,MAAM,eAAI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAAEF,UAAAA,QAAQ,EAAG,OAAb;AAAsBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAAC+B,IAAL,CAAU3B;AAAjB;AAA9B,SAAd;AAAqE,QAAA,EAAE,kBAAaJ,IAAI,CAAC+B,IAAL,CAAU3B,EAAvB;AAAvE,sBAAoG,4CAAG,oBAAC,MAAD,QAASJ,IAAI,CAAC+B,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAH,CAApG,CADd;AAEI,MAAA,KAAK,eAAI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAACI,UAAAA,QAAQ,EAAG,OAAZ;AAAqBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAAC+B,IAAL,CAAU3B;AAAjB;AAA7B,SAAd;AAAoE,QAAA,EAAE,kBAAaJ,IAAI,CAAC+B,IAAL,CAAU3B,EAAvB;AAAtE,sBAAmG,oBAAC,YAAD,QAAeJ,IAAI,CAAC+B,IAAL,CAAUC,QAAzB,CAAnG,CAFb;AAGI,MAAA,WAAW,eACP,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAI;AAAEI,UAAAA,QAAQ,EAAG,OAAb;AAAsBC,UAAAA,KAAK,EAAG;AAAEjC,YAAAA,EAAE,EAAGJ,IAAI,CAAC8B,SAAL,GAAiB9B,IAAI,CAAC8B,SAAtB,GAAkC9B,IAAI,CAACI;AAA9C;AAA9B,SAAd;AAAkG,QAAA,EAAE,kBAAaJ,IAAI,CAAC8B,SAAL,GAAiB9B,IAAI,CAAC8B,SAAtB,GAAkC9B,IAAI,CAACI,EAApD;AAApG,sBACI,oBAAC,eAAD,qBACA,oBAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEJ,IAAI,CAACsC;AAAhC,QADA,CADJ;AAJR,MA7CR,CADJ,EA2DKpC,iBAAiB,iBACd,uDACI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAEF;AAAnB,MADJ,eAEI,oBAAC,IAAD;AACI,MAAA,MAAM,YAAKA,IAAI,CAACuC,QAAL,GAAgBvC,IAAI,CAACuC,QAAL,CAAcC,MAA9B,GAAuC,CAA5C,WADV;AAEI,MAAA,UAAU,EAAG,YAFjB;AAGI,MAAA,UAAU,EAAIxC,IAAI,CAACuC,QAAL,IAAiB,EAHnC;AAII,MAAA,UAAU,EAAI,oBAAAE,IAAI;AAAA,6BACd,oBAAC,cAAD,qBACI,oBAAC,YAAD;AACI,YAAA,MAAM,EAAIA,IAAI,CAACV,IAAL,CAAUC,QADxB;AAEI,YAAA,MAAM,eAAI,oBAAC,IAAD;AAAM,cAAA,IAAI,EAAI;AAAEI,gBAAAA,QAAQ,EAAG,OAAb;AAAsBC,gBAAAA,KAAK,EAAG;AAAEjC,kBAAAA,EAAE,EAAGqC,IAAI,CAACV,IAAL,CAAU3B;AAAjB;AAA9B,eAAd;AAAqE,cAAA,EAAE,kBAAaqC,IAAI,CAACV,IAAL,CAAU3B,EAAvB;AAAvE,4BAAoG,4CAAG,oBAAC,MAAD,QAASqC,IAAI,CAACV,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAAH,CAApG,CAFd;AAGI,YAAA,OAAO,EAAIS,IAAI,CAACH;AAHpB,YADJ,EAMKlC,EAAE,IAAIqC,IAAI,CAACV,IAAL,CAAU3B,EAAV,KAAiBA,EAAvB,gBAED,oBAAC,gBAAD;AAAkB,YAAA,OAAO,EAAEsB,eAAe,CAACe,IAAI,CAACrC,EAAN;AAA1C,4BAFC,GAID,IAVJ;AADc;AAAA;AAJtB,MAFJ,CA5DR;AADJ;AAsFH,CAnKoB,CAArB;AA8KA,eAAeL,QAAf","sourcesContent":["import React, { useState, useCallback, memo, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, List, Comment, Popover } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport { LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST, REMOVE_COMMENT_REQUEST } from '../reducers/post';\r\nimport PostImages from '../components/PostImages';\r\nimport PostCardContent from '../components/PostCardContent';\r\nimport CommentForm from './CommentForm';\r\nimport moment from 'moment';\r\nimport FollowButton from '../components/FollowButton';\r\nimport { CardWrapper, DateSpan, PostCardAtag, PostCardDesAtag, CommentWrapper, CommentStyle, CommentRemoveBtn } from './Style/ContainerStyle';\r\nimport Router from 'next/router';\r\nimport { useEffect } from 'react';\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = memo(({ post, commentOpened }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(commentOpened);\r\n    const id = useSelector(state => state.user.me && state.user.me.id);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = id && post.Likers && post.Likers.find(v => v.id === id);\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(()=> {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        // likers 안에 좋아요 누른 사람들의 배열이 들어있음\r\n        if (liked) { //좋아요 누른 상태\r\n            dispatch({\r\n                type : UNLIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        } else { //좋아요 안 누른 상태\r\n            dispatch({\r\n                type : LIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        }\r\n    }, [id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if(!id){\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n    }, [id , post && post.id]);\r\n\r\n    const onFollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : FOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onUnfollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : UNFOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(postId => () => {\r\n        dispatch({\r\n            type : REMOVE_POST_REQUEST,\r\n            data : postId,\r\n        });\r\n        Router.push('/');\r\n    }, []);\r\n\r\n    const onRemoveComment = useCallback(commentId => () => {\r\n        dispatch({\r\n            type : REMOVE_COMMENT_REQUEST,\r\n            data : {\r\n                commentId,\r\n                postId : post.id\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Card\r\n                // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\r\n                cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}/>,\r\n                    <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#ff7a45\" onClick={onToggleLike}/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                        <Button.Group>\r\n                            {id && post.UserId === id\r\n                            ? (\r\n                                <>\r\n                                <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                                </>\r\n                            )\r\n                            : <Button>신고</Button>}\r\n                        </Button.Group>\r\n                        )}\r\n                    >\r\n                        <Icon type=\"ellipsis\" />\r\n                    </Popover>,\r\n                ]}\r\n                title = {post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다` : <span >{moment(post.createdAt).format('YYYY.MM.DD.')}</span>}\r\n                //로그인을 안 했다면 버튼이 보이지 않음\r\n                extra = {<FollowButton post = {post} onUnfollow={onUnfollow} onFollow={onFollow} />}\r\n            >\r\n                {post.RetweetId && post.Retweet\r\n                ? (\r\n                <Card cover = {post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\r\n                    <DateSpan>{moment(post.createdAt).format('YYYY.MM.DD.')}</DateSpan>\r\n                    <Card.Meta\r\n                        avatar = {<Link href = {{pathname : '/user', query : { id : post.Retweet.User.id } }} as = {`/user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                        title = {<Link href = {{pathname : '/user', query : { id : post.Retweet.User.id } }} as = {`/user/${post.Retweet.User.id}`}><PostCardAtag>\r\n                        {post.Retweet.User.nickname}</PostCardAtag></Link>}\r\n                        description = {\r\n                            <Link href = {{ pathname : '/post', query : { id : post.RetweetId ? post.RetweetId : post.id } }} as = {`/post/${post.RetweetId ? post.RetweetId : post.id}`}>\r\n                                <PostCardDesAtag>\r\n                                <PostCardContent postData={post.Retweet.content}/>\r\n                                </PostCardDesAtag>\r\n                            </Link>}\r\n                    />\r\n                </Card>\r\n                ) : (\r\n                    <Card.Meta\r\n                        avatar = {<Link href = {{ pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                        title = {<Link href = {{pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><PostCardAtag>{post.User.nickname}</PostCardAtag></Link>}\r\n                        description = {\r\n                            <Link href = {{ pathname : '/post', query : { id : post.RetweetId ? post.RetweetId : post.id } }} as = {`/post/${post.RetweetId ? post.RetweetId : post.id}`}>\r\n                                <PostCardDesAtag>\r\n                                <PostCardContent postData={post.content}/>\r\n                            </PostCardDesAtag>\r\n                            </Link>\r\n                        }\r\n                    />\r\n                )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post}/>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <CommentWrapper>\r\n                                <CommentStyle\r\n                                    author = {item.User.nickname}\r\n                                    avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content = {item.content}\r\n                                />\r\n                                {id && item.User.id === id\r\n                                ?\r\n                                <CommentRemoveBtn onClick={onRemoveComment(item.id)}>삭제</CommentRemoveBtn>\r\n                                :\r\n                                null}\r\n                            </CommentWrapper>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n});\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}