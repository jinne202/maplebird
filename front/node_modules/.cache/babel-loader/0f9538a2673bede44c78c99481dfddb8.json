{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append('image', i);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []); // ajax 사용해서 form data 전송\n\n  var onChangeImage = useCallback(function (e) {\n    console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGE_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return (/*#__PURE__*/React.createElement(Form, {\n      style: {\n        margin: '40px 0 20px'\n      },\n      encType: \"multipart/form-data\",\n      onSubmit: onSubmitForm\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      maxLength: 140,\n      placeholder: \"HOW ARE YOU TODAY?\",\n      value: text,\n      onChange: onChangeText\n    }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      multiple: true,\n      hidden: true,\n      ref: imageInput,\n      onChange: onChangeImage\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: onClickImageUpload\n    }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      style: {\n        float: \"right\"\n      },\n      htmlType: \"submit\",\n      loading: isAddingPost\n    }, \"TWIT!\")), /*#__PURE__*/React.createElement(\"div\", null, imagePaths.map(function (v, i) {\n      return (/*#__PURE__*/React.createElement(\"div\", {\n          key: v,\n          style: {\n            display: 'inline-block'\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"http://localhost:7070/\".concat(v),\n          stype: {\n            width: '200px'\n          },\n          alt: v\n        }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Button, {\n          onClick: onRemoveImage(i)\n        }, \"REMOVE\")))\n      );\n    })))\n  );\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGE_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImage","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onRemoveImage","index","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded === true]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if(!text || !text.trim()){\r\n      return alert('게시글을 작성하세요');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((i) => {\r\n      formData.append('image', i);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type : ADD_POST_REQUEST,\r\n      data : formData\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  // ajax 사용해서 form data 전송\r\n  const onChangeImage = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type : UPLOAD_IMAGE_REQUEST,\r\n      data : imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => {\r\n    dispatch({\r\n      type : REMOVE_IMAGE,\r\n      index,\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n      <Form style={{margin : '40px 0 20px'}} encType = \"multipart/form-data\" onSubmit = {onSubmitForm}>\r\n          <Input.TextArea maxLength = {140} placeholder = \"HOW ARE YOU TODAY?\" value = {text} onChange = {onChangeText}/>\r\n          <div>\r\n          <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImage} />\r\n          <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n            <Button type = \"primary\" style = {{ float : \"right\" }} htmlType = \"submit\" loading = {isAddingPost}>TWIT!</Button>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v, i) => {\r\n              return (\r\n                <div key = {v} style = {{display : 'inline-block'}}>\r\n                  <img src={`http://localhost:7070/${v}`} stype={{width : '200px'}} alt = {v}/>\r\n                  <div>\r\n                    <Button onClick = {onRemoveImage(i)}>REMOVE</Button>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n      </Form>\r\n  )\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}