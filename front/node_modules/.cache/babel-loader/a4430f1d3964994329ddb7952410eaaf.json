{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    margin : 30px 0;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, List, Comment, Popover } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport CommentForm from './CommentForm';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\nvar CardWrapper = styled.div(_templateObject());\nvar PostCard = memo(function (_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    } // likers 안에 좋아요 누른 사람들의 배열이 들어있음\n\n\n    if (liked) {\n      //좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return (/*#__PURE__*/React.createElement(CardWrapper, null, /*#__PURE__*/React.createElement(Card // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\n    , {\n      cover: post.Images && post.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/React.createElement(Icon, {\n        type: \"retweet\",\n        key: \"retweet\",\n        onClick: onRetweet\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"heart\",\n        key: \"heart\",\n        theme: liked ? 'twoTone' : 'outlined',\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"message\",\n        key: \"message\",\n        onClick: onToggleComment\n      }), /*#__PURE__*/React.createElement(Popover, {\n        key: \"ellipsis\",\n        content: /*#__PURE__*/React.createElement(Button.Group, null, me && post.UserId === me.id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, null, \"\\uC218\\uC815\"), /*#__PURE__*/React.createElement(Button, {\n          type: \"danger\",\n          onClick: onRemovePost(post.id)\n        }, \"\\uC0AD\\uC81C\")) : /*#__PURE__*/React.createElement(Button, null, \"\\uC2E0\\uACE0\"))\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"ellipsis\"\n      }))],\n      title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4\") : null //로그인을 안 했다면 버튼이 보이지 않음\n      ,\n      extra: /*#__PURE__*/React.createElement(FollowButton, {\n        me: me,\n        post: post,\n        onUnfollow: onUnfollow,\n        onFollow: onFollow\n      })\n    }, post.RetweetId && post.Retweet ? /*#__PURE__*/React.createElement(Card, {\n      cover: post.Retweet.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Retweet.Images\n      })\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        float: 'right'\n      }\n    }, moment(post.createdAt).format('YYYY.MM.DD.')), /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.Retweet.User.id\n          }\n        },\n        as: \"/user/\".concat(post.Retweet.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.Retweet.User.nickname[0]))),\n      title: post.Retweet.User.nickname,\n      description: /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.Retweet.content\n      })\n    })) : /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: \"/user/\".concat(post.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.User.nickname[0]))),\n      title: post.User.nickname,\n      description: /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.content\n      })\n    })), commentFormOpened && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CommentForm, {\n      post: post\n    }), /*#__PURE__*/React.createElement(List, {\n      header: \"\".concat(post.Comments ? post.Comments.length : 0, \" reply\"),\n      itemLayout: \"horizontal\",\n      dataSource: post.Comments || [],\n      renderItem: function renderItem(item) {\n        return (/*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/React.createElement(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: item.User.id\n                }\n              },\n              as: \"/user/\".concat(item.User.id)\n            }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, item.User.nickname[0]))),\n            content: item.content\n          }))\n        );\n      }\n    })))\n  );\n});\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":null,"metadata":{},"sourceType":"module"}