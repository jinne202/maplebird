{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { PostFormStyle, TwitBtn, ThumbImg, ImageUploadBtn, ThumRemoveBtn } from './Style/ContainerStyle';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append('image', i);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []); // ajax 사용해서 form data 전송\n\n  var onChangeImage = useCallback(function (e) {\n    console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGE_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return (/*#__PURE__*/React.createElement(PostFormStyle, {\n      encType: \"multipart/form-data\",\n      onSubmit: onSubmitForm\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      maxLength: 140,\n      placeholder: \"HOW WAS YOUR MAPLESTORY TODAY?\",\n      value: text,\n      onChange: onChangeText\n    }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      multiple: true,\n      hidden: true,\n      ref: imageInput,\n      onChange: onChangeImage\n    }), /*#__PURE__*/React.createElement(ImageUploadBtn, {\n      onClick: onClickImageUpload\n    }, \"IMAGE UPLOAD\"), /*#__PURE__*/React.createElement(TwitBtn, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: isAddingPost\n    }, \"TWIT!\")), /*#__PURE__*/React.createElement(\"div\", null, imagePaths.map(function (v, i) {\n      return (/*#__PURE__*/React.createElement(ThumbImg, {\n          key: v\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"http://localhost:7070/\".concat(v),\n          alt: v\n        }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(ThumRemoveBtn, {\n          onClick: onRemoveImage(i)\n        }, \"REMOVE\")))\n      );\n    })))\n  );\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/project/nodebird/front/containers/PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGE_REQUEST","REMOVE_IMAGE","PostFormStyle","TwitBtn","ThumbImg","ImageUploadBtn","ThumRemoveBtn","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImage","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","onRemoveImage","index","map","v"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\nimport { PostFormStyle, TwitBtn, ThumbImg, ImageUploadBtn, ThumRemoveBtn } from './Style/ContainerStyle'\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded === true]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if(!text || !text.trim()){\r\n      return alert('게시글을 작성하세요');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((i) => {\r\n      formData.append('image', i);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type : ADD_POST_REQUEST,\r\n      data : formData\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  // ajax 사용해서 form data 전송\r\n  const onChangeImage = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type : UPLOAD_IMAGE_REQUEST,\r\n      data : imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onRemoveImage = useCallback(index => () => {\r\n    dispatch({\r\n      type : REMOVE_IMAGE,\r\n      index,\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n      <PostFormStyle encType = \"multipart/form-data\" onSubmit = {onSubmitForm}>\r\n          <Input.TextArea maxLength = {140} placeholder = \"HOW WAS YOUR MAPLESTORY TODAY?\" value = {text} onChange = {onChangeText}/>\r\n          <div>\r\n            <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImage} />\r\n            <ImageUploadBtn onClick={onClickImageUpload}>IMAGE UPLOAD</ImageUploadBtn>\r\n            <TwitBtn type = \"primary\" htmlType = \"submit\" loading = {isAddingPost}>TWIT!</TwitBtn>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v, i) => {\r\n              return (\r\n                <ThumbImg key = {v}>\r\n                  <img src={`http://localhost:7070/${v}`} alt = {v}/>\r\n                  <div>\r\n                    <ThumRemoveBtn onClick = {onRemoveImage(i)}>REMOVE</ThumRemoveBtn>\r\n                  </div>\r\n                </ThumbImg>\r\n              )\r\n            })}\r\n          </div>\r\n      </PostFormStyle>\r\n  )\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}