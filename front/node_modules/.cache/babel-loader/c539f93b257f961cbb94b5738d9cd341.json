{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    margin : 30px 0;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\nimport styled from 'styled-components';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    } // likers 안에 좋아요 누른 사람들의 배열이 들어있음\n\n\n    if (liked) {\n      //좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return (/*#__PURE__*/React.createElement(CardWrapper, null, /*#__PURE__*/React.createElement(Card // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\n    , {\n      cover: post.Images && post.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/React.createElement(Icon, {\n        type: \"retweet\",\n        key: \"retweet\",\n        onClick: onRetweet\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"heart\",\n        key: \"heart\",\n        theme: liked ? 'twoTone' : 'outlined',\n        twoToneColor: \"#eb2f96\",\n        onClick: onToggleLike\n      }), /*#__PURE__*/React.createElement(Icon, {\n        type: \"message\",\n        key: \"message\",\n        onClick: onToggleComment\n      }), /*#__PURE__*/React.createElement(Popover, {\n        key: \"ellipsis\",\n        content: /*#__PURE__*/React.createElement(Button.Group, null, me && post.UserId === me.id ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, null, \"\\uC218\\uC815\"), /*#__PURE__*/React.createElement(Button, {\n          type: \"danger\",\n          onClick: onRemovePost(post.id)\n        }, \"\\uC0AD\\uC81C\")) : /*#__PURE__*/React.createElement(Button, null, \"\\uC2E0\\uACE0\"))\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"ellipsis\"\n      }))],\n      title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717 \\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4\") : null //로그인을 안 했다면 버튼이 보이지 않음\n      ,\n      extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(function (v) {\n        return v.id === post.User.id;\n      }) //내가 이미 팔로우 한 사용자\n      ?\n      /*#__PURE__*/\n      React.createElement(Button, {\n        onClick: onUnfollow(post.User.id)\n      }, \"UnFollow\") : /*#__PURE__*/React.createElement(Button, {\n        onClick: onFollow(post.User.id)\n      }, \"Follow\")\n    }, post.RetweetId && post.Retweet ? /*#__PURE__*/React.createElement(Card, {\n      cover: post.Retweet.Images[0] && /*#__PURE__*/React.createElement(PostImages, {\n        images: post.Retweet.Images\n      })\n    }, /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.Retweet.User.id\n          }\n        },\n        as: \"/user/\".concat(post.Retweet.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.Retweet.User.nickname[0]))),\n      title: post.Retweet.User.nickname,\n      description: /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.Retweet.content\n      })\n    })) : /*#__PURE__*/React.createElement(Card.Meta, {\n      avatar: /*#__PURE__*/React.createElement(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: post.User.id\n          }\n        },\n        as: \"/user/\".concat(post.User.id)\n      }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, post.User.nickname[0]))),\n      title: post.User.nickname,\n      description: /*#__PURE__*/React.createElement(PostCardContent, {\n        postData: post.content\n      })\n    })), commentFormOpened && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: onSubmitComment\n    }, /*#__PURE__*/React.createElement(Form.Item, null, /*#__PURE__*/React.createElement(Input.TextArea, {\n      rows: 4,\n      value: commentText,\n      onChange: onChangeCommentText\n    })), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      loading: isAddingComment\n    }, \"\\uC090\\uC57D\")), /*#__PURE__*/React.createElement(List, {\n      header: \"\".concat(post.Comments ? post.Comments.length : 0, \" reply\"),\n      itemLayout: \"horizontal\",\n      dataSource: post.Comments || [],\n      renderItem: function renderItem(item) {\n        return (/*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/React.createElement(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: item.User.id\n                }\n              },\n              as: \"/user/\".concat(item.User.id)\n            }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Avatar, null, item.User.nickname[0]))),\n            content: item.content\n          }))\n        );\n      }\n    })))\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Link","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","useSelector","useDispatch","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardContent","styled","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img","createdAT"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent';\r\nimport styled from 'styled-components';\r\n\r\nconst CardWrapper = styled.div`\r\n    margin : 30px 0;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(()=> {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        // likers 안에 좋아요 누른 사람들의 배열이 들어있음\r\n        if (liked) { //좋아요 누른 상태\r\n            dispatch({\r\n                type : UNLIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        } else { //좋아요 안 누른 상태\r\n            dispatch({\r\n                type : LIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if(!me){\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n    }, [me && me.id , post && post.id]);\r\n\r\n    const onFollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : FOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onUnfollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : UNFOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(userId => () => {\r\n        dispatch({\r\n            type : REMOVE_POST_REQUEST,\r\n            data : userId,\r\n        });\r\n    });\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Card\r\n                // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\r\n                cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}/>,\r\n                    <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                        <Button.Group>\r\n                            {me && post.UserId === me.id\r\n                            ? (\r\n                                <>\r\n                                <Button>수정</Button>\r\n                                <Button type=\"danger\" onClick={onRemovePost(post.id)}>삭제</Button>\r\n                                </>\r\n                            )\r\n                            : <Button>신고</Button>}\r\n                        </Button.Group>\r\n                        )}\r\n                    >\r\n                        <Icon type=\"ellipsis\" />\r\n                    </Popover>,\r\n                ]}\r\n                title = {post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다` : null}\r\n                //로그인을 안 했다면 버튼이 보이지 않음\r\n                extra = {!me || post.User.id === me.id\r\n                    ?\r\n                    null\r\n                    : me.Followings && me.Followings.find(v => v.id === post.User.id) //내가 이미 팔로우 한 사용자\r\n                        ? <Button onClick={ onUnfollow(post.User.id) }>UnFollow</Button>\r\n                        : <Button onClick={ onFollow(post.User.id) }>Follow</Button>\r\n                }\r\n            >\r\n            {post.RetweetId && post.Retweet\r\n            ? (\r\n            <Card cover = {post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\r\n                <Card.Meta\r\n                    avatar = {<Link href = {{ pathname : '/user', query : { id : post.Retweet.User.id } }} as = {`/user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                    title = {post.Retweet.User.nickname}\r\n                    description = {<PostCardContent postData={post.Retweet.content}/>}\r\n                />\r\n            </Card>\r\n            ) : (\r\n            <Card.Meta\r\n                avatar = {<Link href = {{ pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title = {post.User.nickname}\r\n                description = {<PostCardContent postData={post.content}/>}\r\n            />\r\n            )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading = {isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}