{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadMainPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadComments),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadComments),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, call, throttle } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POST_SUCCESS, LOAD_MAIN_POST_FAILURE, LOAD_MAIN_POST_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POST_SUCCESS, LOAD_USER_POST_FAILURE, LOAD_USER_POST_REQUEST, LOAD_COMMENT_SUCCESS, LOAD_COMMENT_FAILURE, LOAD_COMMENT_REQUEST, UPLOAD_IMAGE_SUCCESS, UPLOAD_IMAGE_FAILURE, UPLOAD_IMAGE_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            //post reducer data 수정\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            //user reducer data 수정\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadMainPostsAPI() {\n  var lastId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return axios.get(\"/posts?lastId=\".concat(lastId, \"&limit=\").concat(limit));\n}\n\nfunction loadMainPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadMainPostsAPI, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_MAIN_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_MAIN_POST_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return throttle(1000, LOAD_MAIN_POST_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag), \"?lastId=\").concat(lastId, \"&limit=10\"));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return throttle(1000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id || 0, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_USER_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_POST_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_POST_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context9.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_COMMENT_FAILURE,\n            error: _context11.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_COMMENT_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post('post/images', formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGE_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGE_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGE_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    //post 만들때 data 없더라도 data 칸에 빈 객체\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && _context19.t0.response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(\"/post/\".concat(postId), {\n    //post 만들때 data 없더라도 data 칸에 빈 객체\n    withCredentials: true\n  });\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context21.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context21.next = 15;\n          break;\n\n        case 10:\n          _context21.prev = 10;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n          _context21.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context21.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(\"/post/\".concat(postId));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.prev = 0;\n          _context23.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context23.sent;\n          _context23.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context23.next = 13;\n          break;\n\n        case 8:\n          _context23.prev = 8;\n          _context23.t0 = _context23[\"catch\"](0);\n          console.error(_context23.t0);\n          _context23.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context23.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","addComment","watchAddComment","loadComments","watchLoadComments","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","removePost","watchRemovePost","loadPost","watchLoadPost","postSaga","all","fork","takeLatest","put","call","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POST_SUCCESS","LOAD_MAIN_POST_FAILURE","LOAD_MAIN_POST_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_USER_POST_SUCCESS","LOAD_USER_POST_FAILURE","LOAD_USER_POST_REQUEST","LOAD_COMMENT_SUCCESS","LOAD_COMMENT_FAILURE","LOAD_COMMENT_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAILURE","UPLOAD_IMAGE_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","id","console","error","loadMainPostsAPI","lastId","limit","get","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","addCommentAPI","postId","content","comment","loadCommentsAPI","comments","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","delete","retweetAPI","alert","response","removePostAPI","loadPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, call, throttle } from 'redux-saga/effects'\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POST_SUCCESS, LOAD_MAIN_POST_FAILURE, LOAD_MAIN_POST_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_USER_POST_SUCCESS, LOAD_USER_POST_FAILURE, LOAD_USER_POST_REQUEST, LOAD_COMMENT_SUCCESS, LOAD_COMMENT_FAILURE, LOAD_COMMENT_REQUEST, UPLOAD_IMAGE_SUCCESS, UPLOAD_IMAGE_FAILURE, UPLOAD_IMAGE_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST } from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials : true,\r\n    })\r\n}\r\n\r\nfunction* addPost(action){\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({ //post reducer data 수정\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({ //user reducer data 수정\r\n            type : ADD_POST_TO_ME,\r\n            data : result.data.id,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\r\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n  }\r\n\r\nfunction* loadMainPosts(action){\r\n    try {\r\n        const result = yield call(loadMainPostsAPI, action.lastId);\r\n        yield put({\r\n            type : LOAD_MAIN_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_MAIN_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield throttle(1000, LOAD_MAIN_POST_REQUEST, loadMainPosts);\r\n    // throttle은 Load main post request가 한 번 호출되면 그 다음 1초동안은 같은 request가 호출되지 않도록 막아줌\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId){\r\n    return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=10`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action){\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        yield put({\r\n            type : LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_HASHTAG_POSTS_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts(){\r\n    yield throttle(1000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id){\r\n    return axios.get(`/user/${id || 0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action){\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type : LOAD_USER_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_USER_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts(){\r\n    yield takeLatest(LOAD_USER_POST_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data){\r\n    return axios.post(`/post/${data.postId}/comment`, { content : data.content }, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : {\r\n                postId : action.data.postId,\r\n                comment : result.data,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId){\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action){\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        yield put({\r\n            type : LOAD_COMMENT_SUCCESS,\r\n            data : {\r\n                postId : action.data,\r\n                comments : result.data,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_COMMENT_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments(){\r\n    yield takeLatest(LOAD_COMMENT_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData){\r\n    return axios.post('post/images', formData, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* uploadImages(action){\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        yield put({\r\n            type : UPLOAD_IMAGE_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : UPLOAD_IMAGE_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGE_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId){\r\n    return axios.post(`/post/${postId}/like`, {}, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* likePost(action){\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type : LIKE_POST_SUCCESS,\r\n            data : {\r\n                postId : action.data,\r\n                userId : result.data.userId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LIKE_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLikePost(){\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId){\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* unlikePost(action){\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type : UNLIKE_POST_SUCCESS,\r\n            data : {\r\n                postId : action.data,\r\n                userId : result.data.userId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : UNLIKE_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnlikePost(){\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId){\r\n    return axios.post(`/post/${postId}/retweet`, {}, { //post 만들때 data 없더라도 data 칸에 빈 객체\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* retweet(action){\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type : RETWEET_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : RETWEET_FAILURE,\r\n            error : e,\r\n        });\r\n        alert(e.response && e.response.data);\r\n    }\r\n}\r\n\r\nfunction* watchRetweet(){\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction removePostAPI(postId){\r\n    return axios.delete(`/post/${postId}`, { //post 만들때 data 없더라도 data 칸에 빈 객체\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* removePost(action){\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type : REMOVE_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n        yield put({\r\n            type : REMOVE_POST_OF_ME,\r\n            data : result.data,\r\n        })\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : REMOVE_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost(){\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction loadPostAPI(postId) {\r\n    return axios.get(`/post/${postId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n      const result = yield call(loadPostAPI, action.data);\r\n      yield put({\r\n        type: LOAD_POST_SUCCESS,\r\n        data: result.data,\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n      yield put({\r\n        type: LOAD_POST_FAILURE,\r\n        error: e,\r\n      });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga(){\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComments),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}