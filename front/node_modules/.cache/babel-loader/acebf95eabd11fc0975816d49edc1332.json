{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostErrorReason: false,\n  //포스트 업로드 실패 사유\n  isAddingPost: false,\n  //포스트 업로드 중\n  postAdded: false,\n  //포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false,\n  hasMorePost: false,\n  singlePost: null\n};\nexport var LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\nexport var LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\nexport var LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\nexport var LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\nexport var LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\nexport var UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\nexport var UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\nexport var UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport var LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport var LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var LOAD_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true;\n          draft.addPostErrorReason = '';\n          draft.postAdded = false;\n          break;\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false, draft.mainPosts.unshift(action.data);\n          draft.postAdded = true, draft.imagePaths = [];\n          break;\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          draft.isAddingPost = false;\n          draft.addPostErrorReason = action.error;\n          break;\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.isAddingComment = true;\n          draft.addCommentErrorReason = '';\n          draft.commentAdded = false;\n          break;\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var postIndex = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n          draft.mainPosts[postIndex].comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          draft.isAddingComment = true, draft.addCommentErrorReason = action.error;\n          break;\n        }\n\n      case LOAD_COMMENT_SUCCESS:\n        {\n          var _postIndex = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          draft.mainPosts[_postIndex].Comments = action.data.comments;\n          break;\n        }\n\n      case LOAD_MAIN_POST_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POST_REQUEST:\n        {\n          draft.mainPosts = action.lastId === 0 ? [] : draft.mainPosts;\n          draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\n          break;\n        }\n\n      case LOAD_MAIN_POST_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POST_SUCCESS:\n        {\n          action.data.forEach(function (d) {\n            draft.mainPosts.push(d);\n          });\n          draft.hasMorePost = action.data.length === 10;\n          break;\n        }\n\n      case LOAD_MAIN_POST_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POST_FAILURE:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGE_REQUEST:\n        {\n          break;\n        }\n\n      case UPLOAD_IMAGE_SUCCESS:\n        {\n          action.data.forEach(function (p) {\n            draft.imagePaths.push(p);\n          });\n          break;\n        }\n\n      case UPLOAD_IMAGE_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_IMAGE:\n        {\n          var index = draft.imagePaths.findIndex(function (v, i) {\n            return i === action.data;\n          });\n          draft.imagePaths.splice(index, 1);\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _postIndex2 = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          draft.mainPosts[_postIndex2].Likers.unshift({\n            id: action.data.userId\n          });\n\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _postIndex3 = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data.postId;\n          });\n\n          var likeIndex = draft.mainPosts[_postIndex3].Likers.findIndex(function (v) {\n            return v.id === action.data.userId;\n          });\n\n          draft.mainPosts[_postIndex3].Likers.splice(likeIndex, 1);\n\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case RETWEET_REQUEST:\n        {\n          break;\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          var _index = draft.mainPosts.findIndex(function (v) {\n            return v.id === action.data;\n          });\n\n          draft.mainPosts.splice(_index, 1);\n          break;\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          break;\n        }\n\n      case LOAD_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.singlePost = action.data;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","hasMorePost","singlePost","LOAD_MAIN_POST_REQUEST","LOAD_MAIN_POST_SUCCESS","LOAD_MAIN_POST_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POST_REQUEST","LOAD_USER_POST_SUCCESS","LOAD_USER_POST_FAILURE","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENT_REQUEST","LOAD_COMMENT_SUCCESS","LOAD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","reducer","state","action","draft","type","unshift","data","error","postIndex","findIndex","v","id","postId","comments","push","comment","Comments","lastId","forEach","d","length","p","index","i","splice","Likers","userId","likeIndex"],"mappings":"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","sourcesContent":["import produce from'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    addPostErrorReason : false , //포스트 업로드 실패 사유\r\n    isAddingPost : false, //포스트 업로드 중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment : false,\r\n    addCommentErrorReason : '',\r\n    commentAdded : false,\r\n    hasMorePost : false,\r\n    singlePost : null,\r\n};\r\n\r\nexport const LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\r\nexport const LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\r\nexport const LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\r\nexport const LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\r\nexport const LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\r\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\r\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const LOAD_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const LOAD_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type){\r\n            case ADD_POST_REQUEST : {\r\n                draft.isAddingPost = true;\r\n                draft.addPostErrorReason = '';\r\n                draft.postAdded = false;\r\n                break;\r\n            }\r\n            case ADD_POST_SUCCESS : {\r\n                draft.isAddingPost = false,\r\n                draft.mainPosts.unshift(action.data);\r\n                draft.postAdded = true,\r\n                draft.imagePaths = [];\r\n                break;\r\n            }\r\n            case ADD_POST_FAILURE : {\r\n                draft.isAddingPost = false;\r\n                draft.addPostErrorReason = action.error;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_REQUEST : {\r\n                draft.isAddingComment = true;\r\n                draft.addCommentErrorReason = '';\r\n                draft.commentAdded = false;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_SUCCESS : {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].comments.push(action.data.comment);\r\n                draft.isAddingComment = false;\r\n                draft.commentAdded = true;\r\n                break;\r\n            }\r\n            case ADD_COMMENT_FAILURE : {\r\n                draft.isAddingComment = true,\r\n                draft.addCommentErrorReason = action.error;\r\n                break;\r\n            }\r\n            case LOAD_COMMENT_SUCCESS : {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Comments = action.data.comments;\r\n                break;\r\n            }\r\n            case LOAD_MAIN_POST_REQUEST :\r\n            case LOAD_HASHTAG_POSTS_REQUEST :\r\n            case LOAD_USER_POST_REQUEST : {\r\n                draft.mainPosts = action.lastId === 0 ? [] : draft.mainPosts;\r\n                draft.hasMorePost = action.lastId ? draft.hasMorePost : true;\r\n                break;\r\n            }\r\n            case LOAD_MAIN_POST_SUCCESS :\r\n            case LOAD_HASHTAG_POSTS_SUCCESS :\r\n            case LOAD_USER_POST_SUCCESS : {\r\n                action.data.forEach((d) => {\r\n                    draft.mainPosts.push(d);\r\n                });\r\n                draft.hasMorePost = action.data.length === 10;\r\n                break;\r\n            }\r\n            case LOAD_MAIN_POST_FAILURE :\r\n            case LOAD_HASHTAG_POSTS_FAILURE :\r\n            case LOAD_USER_POST_FAILURE : {\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGE_REQUEST : {\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGE_SUCCESS : {\r\n                action.data.forEach((p) => {\r\n                    draft.imagePaths.push(p)\r\n                })\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGE_FAILURE : {\r\n                break;\r\n            }\r\n            case REMOVE_IMAGE : {\r\n                const index = draft.imagePaths.findIndex((v, i) => i === action.data);\r\n                draft.imagePaths.splice(index, 1);\r\n                break;\r\n            }\r\n            case LIKE_POST_REQUEST : {\r\n                break;\r\n            }\r\n            case LIKE_POST_SUCCESS : {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                draft.mainPosts[postIndex].Likers.unshift({ id : action.data.userId });\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE : {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_REQUEST : {\r\n                break;\r\n            }\r\n            case UNLIKE_POST_SUCCESS : {\r\n                const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\r\n                const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\r\n                draft.mainPosts[postIndex].Likers.splice(likeIndex, 1);\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE : {\r\n                break;\r\n            }\r\n            case RETWEET_REQUEST : {\r\n                break;\r\n            }\r\n            case RETWEET_SUCCESS : {\r\n                draft.mainPosts.unshift(action.data);\r\n                break;\r\n            }\r\n            case RETWEET_FAILURE : {\r\n                break;\r\n            }\r\n            case REMOVE_POST_REQUEST : {\r\n                break;\r\n            }\r\n            case REMOVE_POST_SUCCESS : {\r\n                const index = draft.mainPosts.findIndex(v => v.id === action.data);\r\n                draft.mainPosts.splice(index, 1);\r\n                break;\r\n            }\r\n            case REMOVE_POST_FAILURE : {\r\n                break;\r\n            }\r\n            case LOAD_POST_REQUEST : {\r\n                break;\r\n            }\r\n            case LOAD_POST_SUCCESS : {\r\n                draft.singlePost = action.data;\r\n                break;\r\n            }\r\n            default : {\r\n                break;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}