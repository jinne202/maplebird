{"ast":null,"code":"import produce from 'immer'; // 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\n// const dummyUser = {\n//     id : 1,\n//     nickname : 'JINNE',\n//     Post : [],\n//     Followings : [],\n//     Followers : [],\n// }\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\n\nexport var initialState = {\n  isLoggingOut: false,\n  //로그아웃 시도중\n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  isSignedUp: false,\n  //회원가입 성공\n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유\n  me: null,\n  //내 정보\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  //팔로워 리스트\n  userInfo: null,\n  //남의 정보\n  isEditingNickname: false,\n  // 닉네임 변경중\n  editNicknameErrorReason: '',\n  hasMoreFollower: false,\n  hasMoreFollowing: false\n}; // 여기까지 store\n\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\n\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 팔로워, 팔로잉 목록 불러오기\n\nexport var LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport var LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport var LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport var LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport var LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport var LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; // 팔로우 하는 액션\n\nexport var FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport var FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport var FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport var UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport var UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport var UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport var EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport var EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport var EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE'; // 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\n\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME'; // // 실제 액션\n// export const loginRequestAction = {\n//     type : LOG_IN_REQUEST,\n// };\n// export const logoutAction = {\n//     type : LOG_OUT_REQUEST,\n// }\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOG_IN_REQUEST:\n        {\n          draft.isLoading = true;\n          draft.isLoggingIn = true;\n          break;\n        }\n\n      case LOG_IN_SUCCESS:\n        {\n          draft.isLoading = false;\n          draft.me = action.data;\n          draft.isLoggingIn = false;\n          break;\n        }\n\n      case LOG_IN_FAILURE:\n        {\n          draft.isLoading = false;\n          draft.isLoggingIn = false;\n          draft.logInErrorReason = acton.error;\n          draft.me = null;\n          break;\n        }\n\n      case LOG_OUT_REQUEST:\n        {\n          draft.isLoggingOut = true;\n          break;\n        }\n\n      case LOG_OUT_SUCCESS:\n        {\n          draft.isLoggingOut = false;\n          draft.me = null;\n          break;\n        }\n\n      case SIGN_UP_REQUEST:\n        {\n          draft.isSigningUp = true;\n          draft.isSignedUp = false;\n          break;\n        }\n\n      case SIGN_UP_SUCCESS:\n        {\n          draft.isSignedUp = true;\n          draft.isSigningUp = false;\n          break;\n        }\n\n      case SIGN_UP_FAILURE:\n        {\n          draft.isSigningUp = false;\n          draft.signUpErrorReason = action.error;\n          break;\n        }\n\n      case LOAD_USER_REQUEST:\n        {\n          break;\n        }\n\n      case LOAD_USER_SUCCESS:\n        {\n          if (action.me) {\n            draft.me = action.data;\n            break;\n          }\n\n          draft.userInfo = action.data;\n          break;\n        }\n\n      case LOAD_USER_FAILURE:\n        {\n          break;\n        }\n\n      case FOLLOW_USER_REQUEST:\n        {\n          break;\n        }\n\n      case FOLLOW_USER_SUCCESS:\n        {\n          draft.me.Followings.unshift({\n            id: action.data\n          });\n          break;\n        }\n\n      case FOLLOW_USER_FAILURE:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_REQUEST:\n        {\n          break;\n        }\n\n      case UNFOLLOW_USER_SUCCESS:\n        {\n          var index = draft.me.Followings.findIndex(function (v) {\n            return v.id === action.data;\n          });\n          draft.me.Followings.splice(index, 1);\n          var index2 = draft.followingList.findIndex(function (v) {\n            return v.id === action.data;\n          });\n          draft.followingList.splice(index2, 1);\n          break;\n        }\n\n      case UNFOLLOW_USER_FAILURE:\n        {\n          break;\n        }\n\n      case ADD_POST_TO_ME:\n        {\n          draft.me.Posts.unshift({\n            id: action.data\n          });\n          break;\n        }\n\n      case REMOVE_POST_OF_ME:\n        {\n          var _index = draft.me.Posts.findIndex(function (v) {\n            return v.id === action.data;\n          });\n\n          draft.me.Posts.splice(_index, 1);\n          break;\n        }\n\n      case LOAD_FOLLOWERS_REQUEST:\n        {\n          draft.followerList = !action.offset ? [] : draft.followerList;\n          draft.hasMoreFollower = action.offset ? state.hasMoreFollower : true;\n          break;\n        }\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        {\n          action.data.forEach(function (d) {\n            draft.followerList.push(d);\n          });\n          draft.hasMoreFollower = action.data.length === 3;\n          break;\n        }\n\n      case LOAD_FOLLOWERS_FAILURE:\n        {\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        {\n          draft.followingList = !action.offset ? [] : draft.followingList;\n          draft.hasMoreFollowing = action.offset ? draft.hasMoreFollowing : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\n\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        {\n          action.data.forEach(function (d) {\n            draft.followingList.push(d);\n          });\n          draft.hasMoreFollowing = action.data.length === 3;\n          break;\n        }\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        {\n          break;\n        }\n\n      case REMOVE_FOLLOWER_REQUEST:\n        {\n          break;\n        }\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        {\n          var _index2 = draft.me.Followers.findIndex(function (v) {\n            return v.id === action.data;\n          });\n\n          draft.me.Followers.splice(_index2, 1);\n\n          var _index3 = draft.followerList.findIndex(function (v) {\n            return v.id === action.data;\n          });\n\n          draft.followerList.splice(_index3, 1);\n          break;\n        }\n\n      case REMOVE_FOLLOWER_FAILURE:\n        {\n          break;\n        }\n\n      case EDIT_NICKNAME_REQUEST:\n        {\n          draft.isEditingNickname = true;\n          draft.editNicknameErrorReason = '';\n          break;\n        }\n\n      case EDIT_NICKNAME_SUCCESS:\n        {\n          draft.isEditingNickname = false;\n          draft.me.nickname = action.data;\n          break;\n        }\n\n      case EDIT_NICKNAME_FAILURE:\n        {\n          draft.isEditingNickname = false;\n          draft.editNicknameErrorReason = action.error;\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["produce","initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","isEditingNickname","editNicknameErrorReason","hasMoreFollower","hasMoreFollowing","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","reducer","state","action","draft","type","isLoading","data","acton","error","Followings","unshift","id","index","findIndex","v","splice","index2","Posts","offset","forEach","d","push","length","Followers","nickname"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\n// const dummyUser = {\r\n//     id : 1,\r\n//     nickname : 'JINNE',\r\n//     Post : [],\r\n//     Followings : [],\r\n//     Followers : [],\r\n// }\r\n\r\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\r\nexport const initialState = {\r\n    isLoggingOut : false, //로그아웃 시도중\r\n    isLoggingIn : false, //로그인 시도중\r\n    logInErrorReason : '', //로그인 에러 사유\r\n    isSignedUp : false, //회원가입 성공\r\n    isSigningUp : false, //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유\r\n    me : null, //내 정보\r\n    followingList : [], //팔로잉 리스트\r\n    followerList : [], //팔로워 리스트\r\n    userInfo : null, //남의 정보\r\n    isEditingNickname : false, // 닉네임 변경중\r\n    editNicknameErrorReason : '',\r\n    hasMoreFollower : false,\r\n    hasMoreFollowing : false,\r\n};\r\n// 여기까지 store\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\n// 팔로워, 팔로잉 목록 불러오기\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\n// 팔로우 하는 액션\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\r\n\r\n// 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\n// // 실제 액션\r\n// export const loginRequestAction = {\r\n//     type : LOG_IN_REQUEST,\r\n// };\r\n\r\n// export const logoutAction = {\r\n//     type : LOG_OUT_REQUEST,\r\n// }\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case LOG_IN_REQUEST : {\r\n                draft.isLoading = true;\r\n                draft.isLoggingIn = true;\r\n                break;\r\n            }\r\n            case LOG_IN_SUCCESS : {\r\n                draft.isLoading = false;\r\n                draft.me = action.data;\r\n                draft.isLoggingIn = false;\r\n                break;\r\n            }\r\n            case LOG_IN_FAILURE : {\r\n                draft.isLoading = false;\r\n                draft.isLoggingIn = false;\r\n                draft.logInErrorReason = acton.error;\r\n                draft.me = null;\r\n                break;\r\n            }\r\n            case LOG_OUT_REQUEST : {\r\n                draft.isLoggingOut = true;\r\n                break;\r\n            }\r\n            case LOG_OUT_SUCCESS : {\r\n                draft.isLoggingOut = false;\r\n                draft.me = null;\r\n                break;\r\n            }\r\n            case SIGN_UP_REQUEST : {\r\n                draft.isSigningUp = true;\r\n                draft.isSignedUp = false;\r\n                break;\r\n            }\r\n            case SIGN_UP_SUCCESS : {\r\n                draft.isSignedUp = true;\r\n                draft.isSigningUp = false;\r\n                break;\r\n            }\r\n            case SIGN_UP_FAILURE : {\r\n                draft.isSigningUp = false;\r\n                draft.signUpErrorReason = action.error;\r\n                break;\r\n            }\r\n            case LOAD_USER_REQUEST : {\r\n                break;\r\n            }\r\n            case LOAD_USER_SUCCESS : {\r\n                if (action.me) {\r\n                    draft.me = action.data;\r\n                    break;\r\n                }\r\n                draft.userInfo = action.data;\r\n                break;\r\n            }\r\n            case LOAD_USER_FAILURE : {\r\n                break;\r\n            }\r\n            case FOLLOW_USER_REQUEST : {\r\n                break;\r\n            }\r\n            case FOLLOW_USER_SUCCESS : {\r\n                draft.me.Followings.unshift({ id : action.data });\r\n                break;\r\n            }\r\n            case FOLLOW_USER_FAILURE : {\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_REQUEST : {\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_SUCCESS: {\r\n                const index = draft.me.Followings.findIndex(v => v.id === action.data);\r\n                draft.me.Followings.splice(index, 1);\r\n                const index2 = draft.followingList.findIndex(v => v.id === action.data);\r\n                draft.followingList.splice(index2, 1);\r\n                break;\r\n            }\r\n            case UNFOLLOW_USER_FAILURE : {\r\n                break;\r\n            }\r\n            case ADD_POST_TO_ME : {\r\n                draft.me.Posts.unshift({ id: action.data });\r\n                break;\r\n            }\r\n            case REMOVE_POST_OF_ME : {\r\n                const index = draft.me.Posts.findIndex(v => v.id === action.data);\r\n                draft.me.Posts.splice(index, 1);\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_REQUEST : {\r\n                draft.followerList = !action.offset ? [] : draft.followerList;\r\n                draft.hasMoreFollower = action.offset ? state.hasMoreFollower : true;\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_SUCCESS: {\r\n                action.data.forEach((d) => {\r\n                    draft.followerList.push(d);\r\n                });\r\n                draft.hasMoreFollower = action.data.length === 3;\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWERS_FAILURE : {\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_REQUEST : {\r\n                draft.followingList = !action.offset ? [] : draft.followingList;\r\n                draft.hasMoreFollowing = action.offset ? draft.hasMoreFollowing : true; // 처음 데이터를 가져올 때는 더보기 버튼을 보여주는 걸로\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_SUCCESS: {\r\n                action.data.forEach((d) => {\r\n                    draft.followingList.push(d);\r\n                });\r\n                draft.hasMoreFollowing = action.data.length === 3;\r\n                break;\r\n            }\r\n            case LOAD_FOLLOWINGS_FAILURE : {\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_REQUEST : {\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_SUCCESS : {\r\n                const index = draft.me.Followers.findIndex(v => v.id === action.data);\r\n                draft.me.Followers.splice(index, 1);\r\n                const index2 = draft.followerList.findIndex(v => v.id === action.data);\r\n                draft.followerList.splice(index2, 1);\r\n                break;\r\n            }\r\n            case REMOVE_FOLLOWER_FAILURE : {\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_REQUEST : {\r\n                draft.isEditingNickname = true;\r\n                draft.editNicknameErrorReason = '';\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_SUCCESS : {\r\n                draft.isEditingNickname = false;\r\n                draft.me.nickname = action.data;\r\n                break;\r\n            }\r\n            case EDIT_NICKNAME_FAILURE : {\r\n                draft.isEditingNickname = false;\r\n                draft.editNicknameErrorReason = action.error;\r\n                break;\r\n            }\r\n            default : {\r\n                break;\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}