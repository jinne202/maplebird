{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { CommentFormStyle, CommentFormItemStyle, CommentSubmitBtn } from './Style/ContainerStyle';\n\nvar CommentForm = function CommentForm(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector.commentAdded,\n      isAddingComment = _useSelector.isAddingComment;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return (/*#__PURE__*/React.createElement(CommentFormStyle, {\n      onSubmit: onSubmitComment\n    }, /*#__PURE__*/React.createElement(CommentFormItemStyle, null, /*#__PURE__*/React.createElement(Input.TextArea, {\n      rows: 4,\n      value: commentText,\n      onChange: onChangeCommentText\n    })), /*#__PURE__*/React.createElement(CommentSubmitBtn, {\n      htmlType: \"submit\",\n      loading: isAddingComment\n    }, \"\\uC090\\uC57D\"))\n  );\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["C:/project/nodebird/front/containers/CommentForm.js"],"names":["React","useState","useCallback","useEffect","Button","Form","Input","useSelector","useDispatch","ADD_COMMENT_REQUEST","CommentFormStyle","CommentFormItemStyle","CommentSubmitBtn","CommentForm","post","commentText","setCommentText","state","commentAdded","isAddingComment","user","me","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,EAAiDC,gBAAjD,QAAyE,wBAAzE;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACQb,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,MACvBc,WADuB;AAAA,MACVC,cADU;;AAAA,qBAEYT,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACH,IAAV;AAAA,GAAN,CAFvB;AAAA,MAEtBI,YAFsB,gBAEtBA,YAFsB;AAAA,MAERC,eAFQ,gBAERA,eAFQ;;AAAA,sBAGfZ,WAAW,CAAC,UAAAU,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHI;AAAA,MAGtBC,EAHsB,iBAGtBA,EAHsB;;AAI9B,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAMe,eAAe,GAAGrB,WAAW,CAAC,UAACsB,CAAD,EAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACJ,EAAL,EAAS;AACL,aAAOK,KAAK,CAAC,YAAD,CAAZ;AACH;;AACD,WAAOJ,QAAQ,CAAC;AACZK,MAAAA,IAAI,EAAGlB,mBADK;AAEZmB,MAAAA,IAAI,EAAG;AACHC,QAAAA,MAAM,EAAGf,IAAI,CAACgB,EADX;AAEHC,QAAAA,OAAO,EAAGhB;AAFP;AAFK,KAAD,CAAf;AAOH,GAZkC,EAYhC,CAACM,EAAE,IAAIA,EAAE,CAACS,EAAV,EAAcf,WAAd,CAZgC,CAAnC;AAcAZ,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAACE,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,MAAMc,mBAAmB,GAAG9B,WAAW,CAAC,UAACsB,CAAD,EAAO;AAC3CR,IAAAA,cAAc,CAACQ,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,uBACI,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAEX;AAA5B,oBACI,oBAAC,oBAAD,qBACI,oBAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,IAAI,EAAE,CAAtB;AAAyB,MAAA,KAAK,EAAER,WAAhC;AAA6C,MAAA,QAAQ,EAAEiB;AAAvD,MADJ,CADJ,eAII,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAC,QAA3B;AAAoC,MAAA,OAAO,EAAEb;AAA7C,sBAJJ;AADJ;AAQH,CApCD;;AA0CA,eAAeN,WAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\nimport { CommentFormStyle, CommentFormItemStyle, CommentSubmitBtn } from './Style/ContainerStyle'\r\n\r\nconst CommentForm = ({ post }) => {\r\n    const [commentText, setCommentText] = useState('');\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <CommentFormStyle onSubmit={onSubmitComment}>\r\n            <CommentFormItemStyle>\r\n                <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n            </CommentFormItemStyle>\r\n            <CommentSubmitBtn htmlType=\"submit\" loading={isAddingComment}>삐약</CommentSubmitBtn>\r\n        </CommentFormStyle>\r\n    );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n    post : PropTypes.object.isRequired,\r\n}\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}