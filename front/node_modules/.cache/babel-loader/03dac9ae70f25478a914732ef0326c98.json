{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React, { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\nimport PostCard from '../containers/PostCard';\n\nvar HashTag = function HashTag(_ref) {\n  var tag = _ref.tag;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePost = _useSelector.hasMorePost;\n\n  var onScroll = useCallback(function () {\n    if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n      if (hasMorePost) {\n        dispatch({\n          type: LOAD_HASHTAG_POSTS_REQUEST,\n          lastId: mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\n          data: tag\n        });\n      }\n    }\n  }, [hasMorePost, mainPosts.length, tag]);\n  useEffect(function () {\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePost, tag]);\n  return (/*#__PURE__*/React.createElement(\"div\", null, mainPosts.map(function (c) {\n      return (/*#__PURE__*/React.createElement(PostCard, {\n          key: c.id,\n          post: c\n        })\n      );\n    }))\n  );\n};\n\n// getInitialProps = 이건 method가 하나 생긴다! 얘는 context라는 매개변수를 받는다 이거 사용하려면 _app.js에서 nodebird getinitialProps를 사용해야한다\nHashTag.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var tag;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tag = context.query.tag;\n            console.log('hashtag getInitialProps', tag);\n            context.store.dispatch({\n              type: LOAD_HASHTAG_POSTS_REQUEST,\n              data: tag\n            });\n            return _context.abrupt(\"return\", {\n              tag: tag\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default HashTag;","map":{"version":3,"sources":["C:/project/nodebird/front/pages/hashtag.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","LOAD_HASHTAG_POSTS_REQUEST","PostCard","HashTag","tag","dispatch","state","post","mainPosts","hasMorePost","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","type","lastId","length","id","data","addEventListener","removeEventListener","map","c","getInitialProps","context","query","console","log","store"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,0BAAT,QAA2C,kBAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AACzB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AADyB,qBAEUC,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAFrB;AAAA,MAEjBC,SAFiB,gBAEjBA,SAFiB;AAAA,MAENC,WAFM,gBAENA,WAFM;;AAIzB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,YAAM;AAC/B,QAAIa,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACxG,UAAIP,WAAJ,EAAiB;AACfJ,QAAAA,QAAQ,CAAC;AACPY,UAAAA,IAAI,EAAGhB,0BADA;AAEPiB,UAAAA,MAAM,EAAGV,SAAS,CAACA,SAAS,CAACW,MAAV,GAAmB,CAApB,CAAT,IAAmCX,SAAS,CAACA,SAAS,CAACW,MAAV,GAAmB,CAApB,CAAT,CAAgCC,EAFrE;AAGPC,UAAAA,IAAI,EAAGjB;AAHA,SAAD,CAAR;AAKD;AACF;AACF,GAVyB,EAUvB,CAACK,WAAD,EAAcD,SAAS,CAACW,MAAxB,EAAgCf,GAAhC,CAVuB,CAA5B;AAYEP,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCZ,QAAlC;AACA,WAAO,YAAM;AACXC,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCb,QAArC;AACD,KAFD;AAGD,GALQ,EAKN,CAACF,SAAS,CAACW,MAAX,EAAmBV,WAAnB,EAAgCL,GAAhC,CALM,CAAT;AAOF,uBACI,iCACKI,SAAS,CAACgB,GAAV,CAAc,UAAAC,CAAC;AAAA,2BACZ,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,CAAC,CAACL,EAAjB;AAAqB,UAAA,IAAI,EAAEK;AAA3B;AADY;AAAA,KAAf,CADL;AADJ;AAOH,CA9BD;;AAoCA;AACAtB,OAAO,CAACuB,eAAR;AAAA,uEAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfvB,YAAAA,GADe,GACRuB,OAAO,CAACC,KADA,CACfxB,GADe;AAEtByB,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC1B,GAAvC;AACAuB,YAAAA,OAAO,CAACI,KAAR,CAAc1B,QAAd,CAAuB;AACnBY,cAAAA,IAAI,EAAGhB,0BADY;AAEnBoB,cAAAA,IAAI,EAAGjB;AAFY,aAAvB;AAHsB,6CAOf;AAAEA,cAAAA,GAAG,EAAHA;AAAF,aAPe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAeD,OAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_HASHTAG_POSTS_REQUEST } from '../reducers/post';\r\nimport PostCard from '../containers/PostCard';\r\n\r\nconst HashTag = ({ tag }) => {\r\n    const dispatch = useDispatch();\r\n    const { mainPosts, hasMorePost } = useSelector(state => state.post);\r\n\r\n    const onScroll = useCallback(() => {\r\n        if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n          if (hasMorePost) {\r\n            dispatch({\r\n              type : LOAD_HASHTAG_POSTS_REQUEST,\r\n              lastId : mainPosts[mainPosts.length - 1] && mainPosts[mainPosts.length - 1].id,\r\n              data : tag,\r\n            });\r\n          }\r\n        }\r\n      }, [hasMorePost, mainPosts.length, tag]);\r\n      \r\n      useEffect(() => {\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n          window.removeEventListener('scroll', onScroll);\r\n        }\r\n      }, [mainPosts.length, hasMorePost, tag]);\r\n\r\n    return(\r\n        <div>\r\n            {mainPosts.map(c => (\r\n                <PostCard key={c.id} post={c} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nHashTag.propTypes = {\r\n    tag : PropTypes.string.isRequired,\r\n};\r\n\r\n// getInitialProps = 이건 method가 하나 생긴다! 얘는 context라는 매개변수를 받는다 이거 사용하려면 _app.js에서 nodebird getinitialProps를 사용해야한다\r\nHashTag.getInitialProps = async (context) => {\r\n    const {tag} = context.query;\r\n    console.log('hashtag getInitialProps', tag);\r\n    context.store.dispatch({\r\n        type : LOAD_HASHTAG_POSTS_REQUEST,\r\n        data : tag,\r\n    });\r\n    return { tag };\r\n};\r\n\r\nexport default HashTag;"]},"metadata":{},"sourceType":"module"}